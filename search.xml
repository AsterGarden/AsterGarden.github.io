<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[从零开始编写Excel表格分割程序]]></title>
    <url>%2F2019%2F03%2F12%2F%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99Excel%E8%A1%A8%E6%A0%BC%E5%88%86%E5%89%B2%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[需求某家公司需要将每天的商品订单进行一系列处理，订单量很大，文字很多，之前都是靠人工手动完成，单调枯燥却要不断重复，有没有什么办法可以利用程序自动完成呢？如下图所示，其中之一的流程是将【商品留言】中的【品牌】/【车型】/【年款】提取出来，其中【车型】如果是数字需转化为数字类型，【年款】中的数字需提取出来，并转化为数字类型，方便排序。处理前： 处理后： 编写Python程序123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184#!/usr/bin/env python # -_- coding:utf-8 -_-#author:Aster Chen#date:2019-03import tkinter as tkfrom tkinter import filedialogfrom tkinter import messageboxfrom tkinter import ttkimport webbrowserimport osimport reimport openpyxlimport xlrdimport pandas as pdimport numpy as npfrom pandas import DataFrame, Serieswindow = tk.Tk()window.title("枫叶分割软件 Maple2.0")window.geometry("600x200")# 定义函数#创建默认输出文件夹def mkdir(path): path=path.strip() path=path.rstrip("\\") isExists=os.path.exists(path) if not isExists: os.makedirs(path)mkpath="D:\\枫树分割【结果】\\"mkdir(mkpath)def result_exist(): result_path="D:\\枫树分割【结果】\\分割结果.xlsx" result_exist=os.path.exists(result_path) if result_exist==True: tk.messagebox.showwarning(message='警告！D:\\枫树分割【结果】\\分割结果.xlsx 已存在，请删除【分割结果.xlsx】！')#初始化定义 选定文件名为空open_name=str()def open_file(): # 打开文件 global open_name open_name = filedialog.askopenfilename( title='打开 Excel 文件', filetypes=[('Excel', '*.xlsx')]) var1.set(open_name) # 显示选择文件的路径def cut_off(): result_exist() import time start_time = time.time() xlsx = pd.ExcelFile(open_name) df = pd.read_excel(xlsx, "Sheet1") messages = list(df["商品留言"]) result = pd.DataFrame(columns=('品牌', '车型', '年款')) for message in messages: brand_list = message.replace('：', ':').replace('；', ';').split(":")[ 1].split(";")[0].split("\n") # 品牌 brand = "".join(brand_list) types_list = message.replace('：', ':').replace('；', ';').split(":")[ 2].split(";")[0].split("\n") # 车型 types = "".join(types_list) # 如果是整数则返回整数，否则返回字符串 types_t = types.isdigit() types_int = types_t and int(types) or types year_list = message.replace('：', ':').replace('；', ';').split(":")[ 3].split(";")[0].split("\n") # 年款 year_str = "".join(year_list) # 正则表达式匹配年份，针对不同格式和年代补全， year_str1 = re.compile(r'[2]\d&#123;3&#125;').findall(year_str) if len(year_str1) == 0: year_str2 = re.compile(r'[1]\d&#123;1&#125;').findall(year_str) if len(year_str2) == 0: year_str3 = re.compile(r'[0]\d&#123;1&#125;').findall(year_str) if len(year_str3) == 0: year_str4 = re.compile(r'[9]\d&#123;1&#125;').findall(year_str) if len(year_str4) == 0: year = 0 # 无法识别即为0，比如【1年半】之类，如果数字正常仍为0，可能是格式问题 else: year = int(r'19'+year_str4[0]) else: year = int(r'20'+year_str3[0]) else: year = int(r'20'+year_str2[0]) else: year = int(year_str1[0]) result = result.append(pd.DataFrame( &#123;'品牌': [brand], '车型': [types_int], '年款': [year]&#125;), ignore_index=True) global result_name result_name='D:\\枫树分割【结果】\\分割结果.xlsx' result.to_excel(result_name, sheet_name='Sheet1') end_time = time.time() times=int(end_time-start_time) global result_text result_text="分割成功！输出结果在D:\\枫树分割【结果】\\分割结果.xlsx，用时约: %d 秒" % times var2.set(result_text)# 视图部分# 分为处理文件的上部和详情信息的下部frm_top = tk.Frame(window)frm_btm = tk.Frame(window)frm_top.pack(side='top')frm_btm.pack(side='bottom')# 详情信息分为使用信息和作者信息frm_info = tk.Frame(frm_btm)frm_auth = tk.Frame(frm_btm)frm_info.pack(side='top')frm_auth.pack(side='bottom')#样式文件style = ttk.Style()style.map("TButton",foreground=[('pressed', 'red'), ('active', 'blue')],background=[('pressed', '!disabled', 'black'), ('active', 'white')],)# 选择文件b1 = ttk.Button(frm_top, text='选择文件',style="TButton",command=open_file) b1.grid(row=1, column=0, padx=5, pady=10)# 选定文件名的显示框var1 = tk.StringVar()l1 = tk.Label(frm_top,textvariable=var1)l1.grid(row=1, column=1, padx=5, pady=10)# 分割文件b2 = ttk.Button(frm_top, text='分割文件',style="TButton",command=cut_off)b2.grid(row=2, column=0, padx=5, pady=10)var2=tk.StringVar()l2 = tk.Label(frm_top,textvariable=var2)l2.grid(row=2, column=1, padx=5, pady=10)# 注意事项t3 = tk.Text(frm_info, bg='#f0f0f0', width=70, height=1.5)t3.pack()t3.insert(1.0, "详情点击：枫树分割程序 Maple2.0 安装及使用方法,密码:【********】")t3.tag_add("link", "1.5", "1.27")t3.tag_config("link", foreground="blue", underline=True)def click(event): webbrowser.open("http://asterchen.xyz/2019/03/11")t3.tag_bind("link", "&lt;Button-1&gt;", click)t3.config(state=tk.DISABLED)# 作者信息t4 =tk.Text(frm_auth, bg='#f0f0f0', width=70, height=1.5)t4.insert(1.0, 'Version: Maple2.0 Date: 2019-03-11 Author: Aster Chen')t4.config(state=tk.DISABLED)t4.pack()window.mainloop() 制作图标下载免费素材制作ico图标，在线制作ico图标网址 用pyinstaller将py文件打包成exe文件py文件名为：Maple2.0.py，ico图标名为：maple.ico，两个文件在同一文件夹E:\maple2.0下，在E:\maple2.0文件夹下运行以下命令 安装pyinstaller1pip install pyinstaller 打包1pyinstaller --onefile --nowindowed --icon="E:\maple2.0\maple.ico" Maple2.0.py --noconsole 打包之后如图所示： 打包之后不需要另外配置Python环境和安装各种所需的库，也可将py文件删去，在dist文件中打开exe文件即可使用。生成的的exe文件如图所示： 操作简单，选择文件之后点击分割文件即可。]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[枫树分割程序Maple2.0安装及使用方法]]></title>
    <url>%2F2019%2F03%2F11%2F%E6%9E%AB%E6%A0%91%E5%88%86%E5%89%B2%E7%A8%8B%E5%BA%8FMaple2.0%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[输入密码，查看文章 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React]]></title>
    <url>%2F2019%2F02%2F15%2FReact%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Django留言板项目]]></title>
    <url>%2F2019%2F02%2F12%2FDjango%E7%95%99%E8%A8%80%E6%9D%BF%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[在项目开始之前，需了解以下知识： 安装Python 3.x.x Django安装 验证Python是否安装成功 快捷键”Ctrl”+”Win”,输入cmd,按下回车键 输入python，按下回车 如下图所示，Python安装成功。 安装pip 按需从pip官网下载 相关配置参考文档 安装Django打开命令行]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js聊天室项目]]></title>
    <url>%2F2019%2F02%2F12%2FNode-js%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[前端资料汇总]]></title>
    <url>%2F2019%2F02%2F12%2F%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[前端资料汇总 w3school 在线教程 Less.js Sass jQuery Bootstrap Vue.js React webpack git]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端资料汇总]]></title>
    <url>%2F2019%2F01%2F08%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端 -hexo</tag>
      </tags>
  </entry>
</search>
