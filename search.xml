<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[枫树分割程序Maple2.0安装及使用方法]]></title>
    <url>%2F2019%2F03%2F12%2F%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99Excel%E8%A1%A8%E6%A0%BC%E5%88%86%E5%89%B2%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[###需求某家公司需要将每天的商品订单进行一系列处理，订单量很大，文字很多，之前都是靠人工手动完成，单调枯燥却要不断重复，有没有什么办法可以利用程序自动完成呢？如下图所示，其中之一的流程是将【商品留言】中的【品牌】/【车型】/【年款】提取出来，其中【车型】如果是数字需转化为数字类型，【年款】中的数字需提取出来，并转化为数字类型，方便排序。处理前： 处理后： ###编写Python程序(`) #!/usr/bin/env python # -_- coding:utf-8 -_- #author:Aster Chen #date:2019-03 import tkinter as tk from tkinter import filedialog from tkinter import messagebox from tkinter import ttk import webbrowser import os import re import openpyxl import xlrd import pandas as pd import numpy as np from pandas import DataFrame, Series window = tk.Tk() window.title(&quot;枫叶分割软件 Maple2.0&quot;) window.geometry(&quot;600x200&quot;) # 定义函数 #创建默认输出文件夹 def mkdir(path): path=path.strip() path=path.rstrip(&quot;\\&quot;) isExists=os.path.exists(path) if not isExists: os.makedirs(path) mkpath=&quot;D:\\枫树分割【结果】\\&quot; mkdir(mkpath) def result_exist(): result_path=&quot;D:\\枫树分割【结果】\\分割结果.xlsx&quot; result_exist=os.path.exists(result_path) if result_exist==True: tk.messagebox.showwarning(message=&apos;警告！D:\\枫树分割【结果】\\分割结果.xlsx 已存在，请删除【分割结果.xlsx】！&apos;) #初始化定义 选定文件名为空 open_name=str() def open_file(): # 打开文件 global open_name open_name = filedialog.askopenfilename( title=&apos;打开 Excel 文件&apos;, filetypes=[(&apos;Excel&apos;, &apos;*.xlsx&apos;)]) var1.set(open_name) # 显示选择文件的路径 def cut_off(): result_exist() import time start_time = time.time() xlsx = pd.ExcelFile(open_name) df = pd.read_excel(xlsx, &quot;Sheet1&quot;) messages = list(df[&quot;商品留言&quot;]) result = pd.DataFrame(columns=(&apos;品牌&apos;, &apos;车型&apos;, &apos;年款&apos;)) for message in messages: brand_list = message.replace(&apos;：&apos;, &apos;:&apos;).replace(&apos;；&apos;, &apos;;&apos;).split(&quot;:&quot;)[ 1].split(&quot;;&quot;)[0].split(&quot;\n&quot;) # 品牌 brand = &quot;&quot;.join(brand_list) types_list = message.replace(&apos;：&apos;, &apos;:&apos;).replace(&apos;；&apos;, &apos;;&apos;).split(&quot;:&quot;)[ 2].split(&quot;;&quot;)[0].split(&quot;\n&quot;) # 车型 types = &quot;&quot;.join(types_list) # 如果是整数则返回整数，否则返回字符串 types_t = types.isdigit() types_int = types_t and int(types) or types year_list = message.replace(&apos;：&apos;, &apos;:&apos;).replace(&apos;；&apos;, &apos;;&apos;).split(&quot;:&quot;)[ 3].split(&quot;;&quot;)[0].split(&quot;\n&quot;) # 年款 year_str = &quot;&quot;.join(year_list) # 正则表达式匹配年份，针对不同格式和年代补全， year_str1 = re.compile(r&apos;[2]\d{3}&apos;).findall(year_str) if len(year_str1) == 0: year_str2 = re.compile(r&apos;[1]\d{1}&apos;).findall(year_str) if len(year_str2) == 0: year_str3 = re.compile(r&apos;[0]\d{1}&apos;).findall(year_str) if len(year_str3) == 0: year_str4 = re.compile(r&apos;[9]\d{1}&apos;).findall(year_str) if len(year_str4) == 0: year = 0 # 无法识别即为0，比如【1年半】之类，如果数字正常仍为0，可能是格式问题 else: year = int(r&apos;19&apos;+year_str4[0]) else: year = int(r&apos;20&apos;+year_str3[0]) else: year = int(r&apos;20&apos;+year_str2[0]) else: year = int(year_str1[0]) result = result.append(pd.DataFrame( {&apos;品牌&apos;: [brand], &apos;车型&apos;: [types_int], &apos;年款&apos;: [year]}), ignore_index=True) global result_name result_name=&apos;D:\\枫树分割【结果】\\分割结果.xlsx&apos; result.to_excel(result_name, sheet_name=&apos;Sheet1&apos;) end_time = time.time() times=int(end_time-start_time) global result_text result_text=&quot;分割成功！输出结果在D:\\枫树分割【结果】\\分割结果.xlsx，用时约: %d 秒&quot; % times var2.set(result_text) # 视图部分 # 分为处理文件的上部和详情信息的下部 frm_top = tk.Frame(window) frm_btm = tk.Frame(window) frm_top.pack(side=&apos;top&apos;) frm_btm.pack(side=&apos;bottom&apos;) # 详情信息分为使用信息和作者信息 frm_info = tk.Frame(frm_btm) frm_auth = tk.Frame(frm_btm) frm_info.pack(side=&apos;top&apos;) frm_auth.pack(side=&apos;bottom&apos;) #样式文件 style = ttk.Style() style.map(&quot;TButton&quot;, foreground=[(&apos;pressed&apos;, &apos;red&apos;), (&apos;active&apos;, &apos;blue&apos;)], background=[(&apos;pressed&apos;, &apos;!disabled&apos;, &apos;black&apos;), (&apos;active&apos;, &apos;white&apos;)], ) # 选择文件 b1 = ttk.Button(frm_top, text=&apos;选择文件&apos;, style=&quot;TButton&quot;, command=open_file) b1.grid(row=1, column=0, padx=5, pady=10) # 选定文件名的显示框 var1 = tk.StringVar() l1 = tk.Label(frm_top, textvariable=var1) l1.grid(row=1, column=1, padx=5, pady=10) # 分割文件 b2 = ttk.Button(frm_top, text=&apos;分割文件&apos;, style=&quot;TButton&quot;, command=cut_off) b2.grid(row=2, column=0, padx=5, pady=10) var2=tk.StringVar() l2 = tk.Label(frm_top, textvariable=var2) l2.grid(row=2, column=1, padx=5, pady=10) # 注意事项 t3 = tk.Text(frm_info, bg=&apos;#f0f0f0&apos;, width=70, height=1.5) t3.pack() t3.insert(1.0, &quot;详情点击：枫树分割程序 Maple2.0 安装及使用方法,密码:【yuguan】&quot;) t3.tag_add(&quot;link&quot;, &quot;1.5&quot;, &quot;1.27&quot;) t3.tag_config(&quot;link&quot;, foreground=&quot;blue&quot;, underline=True) def click(event): webbrowser.open(&quot;http://asterchen.xyz/2019/03/11/%E6%9E%AB%E6%A0%91%E5%88%86%E5%89%B2%E7%A8%8B%E5%BA%8FMaple2.0%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/#more&quot;) t3.tag_bind(&quot;link&quot;, &quot;&lt;Button-1&gt;&quot;, click) t3.config(state=tk.DISABLED) # 作者信息 t4 =tk.Text(frm_auth, bg=&apos;#f0f0f0&apos;, width=70, height=1.5) t4.insert(1.0, &apos;Version: Maple2.0 Date: 2019-03-11 Author: Aster Chen&apos;) t4.config(state=tk.DISABLED) t4.pack() window.mainloop() (`) 制作图标下载免费素材制作ico图标，在线制作ico图标网址 用pyinstaller将py文件打包成exe文件py文件名为：Maple2.0.py，ico图标名为：maple.ico，两个文件在同一文件夹E:\maple2.0下，在E:\maple2.0文件夹下运行以下命令 安装pyinstaller(`) pip install pyinstaller (`) 打包(`) pyinstaller --onefile --nowindowed --icon=&quot;E:\maple2.0\maple.ico&quot; Maple2.0.py --noconsole (`) 打包之后如图所示： 打包之后不需要另外配置Python环境和安装各种所需的库，也可将py文件删去，在dist文件中打开exe文件即可使用。生成的的exe文件如图所示： 操作简单，选择文件之后点击分割文件即可。]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[枫树分割程序Maple2.0安装及使用方法]]></title>
    <url>%2F2019%2F03%2F11%2F%E6%9E%AB%E6%A0%91%E5%88%86%E5%89%B2%E7%A8%8B%E5%BA%8FMaple2.0%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[输入密码，查看文章 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React]]></title>
    <url>%2F2019%2F02%2F15%2FReact%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Django留言板项目]]></title>
    <url>%2F2019%2F02%2F12%2FDjango%E7%95%99%E8%A8%80%E6%9D%BF%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[在项目开始之前，需了解以下知识： 安装Python 3.x.x Django安装 验证Python是否安装成功 快捷键”Ctrl”+”Win”,输入cmd,按下回车键 输入python，按下回车 如下图所示，Python安装成功。 安装pip 按需从pip官网下载 相关配置参考文档 安装Django打开命令行]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js聊天室项目]]></title>
    <url>%2F2019%2F02%2F12%2FNode-js%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[前端资料汇总]]></title>
    <url>%2F2019%2F02%2F12%2F%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[前端资料汇总 w3school 在线教程 Less.js Sass jQuery Bootstrap Vue.js React webpack git]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端资料汇总]]></title>
    <url>%2F2019%2F01%2F08%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端 -hexo</tag>
      </tags>
  </entry>
</search>
