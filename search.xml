<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[从零开始编写Excel表格分割程序]]></title>
    <url>%2F2019%2F03%2F12%2F%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99Excel%E8%A1%A8%E6%A0%BC%E5%88%86%E5%89%B2%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[需求某家公司需要将每天的商品订单进行一系列处理，订单量很大，文字很多，之前都是靠人工手动完成，单调枯燥却要不断重复，有没有什么办法可以利用程序自动完成呢？如下图所示，其中之一的流程是将【商品留言】中的【品牌】/【车型】/【年款】提取出来，其中【车型】如果是数字需转化为数字类型，【年款】中的数字需提取出来，并转化为数字类型，方便排序。处理前： 处理后： 编写Python程序123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184#!/usr/bin/env python # -_- coding:utf-8 -_-#author:Aster Chen#date:2019-03import tkinter as tkfrom tkinter import filedialogfrom tkinter import messageboxfrom tkinter import ttkimport webbrowserimport osimport reimport openpyxlimport xlrdimport pandas as pdimport numpy as npfrom pandas import DataFrame, Serieswindow = tk.Tk()window.title("枫树分割软件 Maple2.0")window.geometry("600x200")# 定义函数#创建默认输出文件夹def mkdir(path): path=path.strip() path=path.rstrip("\\") isExists=os.path.exists(path) if not isExists: os.makedirs(path)mkpath="D:\\枫树分割【结果】\\"mkdir(mkpath)def result_exist(): result_path="D:\\枫树分割【结果】\\分割结果.xlsx" result_exist=os.path.exists(result_path) if result_exist==True: tk.messagebox.showwarning(message='警告！D:\\枫树分割【结果】\\分割结果.xlsx 已存在，请删除【分割结果.xlsx】！')#初始化定义 选定文件名为空open_name=str()def open_file(): # 打开文件 global open_name open_name = filedialog.askopenfilename( title='打开 Excel 文件', filetypes=[('Excel', '*.xlsx')]) var1.set(open_name) # 显示选择文件的路径def cut_off(): result_exist() import time start_time = time.time() xlsx = pd.ExcelFile(open_name) df = pd.read_excel(xlsx, "Sheet1") messages = list(df["商品留言"]) result = pd.DataFrame(columns=('品牌', '车型', '年款')) for message in messages: brand_list = message.replace('：', ':').replace('；', ';').split(":")[ 1].split(";")[0].split("\n") # 品牌 brand = "".join(brand_list) types_list = message.replace('：', ':').replace('；', ';').split(":")[ 2].split(";")[0].split("\n") # 车型 types = "".join(types_list) # 如果是整数则返回整数，否则返回字符串 types_t = types.isdigit() types_int = types_t and int(types) or types year_list = message.replace('：', ':').replace('；', ';').split(":")[ 3].split(";")[0].split("\n") # 年款 year_str = "".join(year_list) # 正则表达式匹配年份，针对不同格式和年代补全， year_str1 = re.compile(r'[2]\d&#123;3&#125;').findall(year_str) if len(year_str1) == 0: year_str2 = re.compile(r'[1]\d&#123;1&#125;').findall(year_str) if len(year_str2) == 0: year_str3 = re.compile(r'[0]\d&#123;1&#125;').findall(year_str) if len(year_str3) == 0: year_str4 = re.compile(r'[9]\d&#123;1&#125;').findall(year_str) if len(year_str4) == 0: year = 0 # 无法识别即为0，比如【1年半】之类，如果数字正常仍为0，可能是格式问题 else: year = int(r'19'+year_str4[0]) else: year = int(r'20'+year_str3[0]) else: year = int(r'20'+year_str2[0]) else: year = int(year_str1[0]) result = result.append(pd.DataFrame( &#123;'品牌': [brand], '车型': [types_int], '年款': [year]&#125;), ignore_index=True) global result_name result_name='D:\\枫树分割【结果】\\分割结果.xlsx' result.to_excel(result_name, sheet_name='Sheet1') end_time = time.time() times=int(end_time-start_time) global result_text result_text="分割成功！输出结果在D:\\枫树分割【结果】\\分割结果.xlsx，用时约: %d 秒" % times var2.set(result_text)# 视图部分# 分为处理文件的上部和详情信息的下部frm_top = tk.Frame(window)frm_btm = tk.Frame(window)frm_top.pack(side='top')frm_btm.pack(side='bottom')# 详情信息分为使用信息和作者信息frm_info = tk.Frame(frm_btm)frm_auth = tk.Frame(frm_btm)frm_info.pack(side='top')frm_auth.pack(side='bottom')#样式文件style = ttk.Style()style.map("TButton",foreground=[('pressed', 'red'), ('active', 'blue')],background=[('pressed', '!disabled', 'black'), ('active', 'white')],)# 选择文件b1 = ttk.Button(frm_top, text='选择文件',style="TButton",command=open_file) b1.grid(row=1, column=0, padx=5, pady=10)# 选定文件名的显示框var1 = tk.StringVar()l1 = tk.Label(frm_top,textvariable=var1)l1.grid(row=1, column=1, padx=5, pady=10)# 分割文件b2 = ttk.Button(frm_top, text='分割文件',style="TButton",command=cut_off)b2.grid(row=2, column=0, padx=5, pady=10)var2=tk.StringVar()l2 = tk.Label(frm_top,textvariable=var2)l2.grid(row=2, column=1, padx=5, pady=10)# 注意事项t3 = tk.Text(frm_info, bg='#f0f0f0', width=70, height=1.5)t3.pack()t3.insert(1.0, "详情点击：枫树分割程序 Maple2.0 安装及使用方法,密码:【********】")t3.tag_add("link", "1.5", "1.27")t3.tag_config("link", foreground="blue", underline=True)def click(event): webbrowser.open("http://asterchen.xyz/2019/03/11")t3.tag_bind("link", "&lt;Button-1&gt;", click)t3.config(state=tk.DISABLED)# 作者信息t4 =tk.Text(frm_auth, bg='#f0f0f0', width=70, height=1.5)t4.insert(1.0, 'Version: Maple2.0 Date: 2019-03-11 Author: Aster Chen')t4.config(state=tk.DISABLED)t4.pack()window.mainloop() 制作图标下载免费素材制作ico图标，在线制作ico图标网址 用pyinstaller将py文件打包成exe文件py文件名为：Maple2.0.py，ico图标名为：maple.ico，两个文件在同一文件夹E:\maple2.0下，在E:\maple2.0文件夹下运行以下命令 安装pyinstaller1pip install pyinstaller 打包1pyinstaller --onefile --nowindowed --icon="E:\maple2.0\maple.ico" Maple2.0.py --noconsole 打包之后如图所示： 打包之后不需要另外配置Python环境和安装各种所需的库，也可将py文件删去，在dist文件中打开exe文件即可使用。生成的的exe文件如图所示： 操作简单，选择文件之后点击分割文件即可。]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[枫树分割程序Maple2.0安装及使用方法]]></title>
    <url>%2F2019%2F03%2F11%2F%E6%9E%AB%E6%A0%91%E5%88%86%E5%89%B2%E7%A8%8B%E5%BA%8FMaple2.0%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[输入密码，查看文章 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React]]></title>
    <url>%2F2019%2F02%2F15%2FReact%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Django留言板项目]]></title>
    <url>%2F2019%2F02%2F12%2FDjango%E7%95%99%E8%A8%80%E6%9D%BF%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[在项目开始之前，需了解以下知识： 安装Python 3.x.x Django安装 验证Python是否安装成功 快捷键”Ctrl”+”Win”,输入cmd,按下回车键 输入python，按下回车 如下图所示，Python安装成功。 安装pip 按需从pip官网下载 相关配置参考文档 安装Django打开命令行]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js聊天室项目]]></title>
    <url>%2F2019%2F02%2F12%2FNode-js%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[前端资料汇总]]></title>
    <url>%2F2019%2F02%2F12%2F%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[前端资料汇总 w3school 在线教程 Less.js Sass jQuery Bootstrap Vue.js React webpack git]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端资料汇总]]></title>
    <url>%2F2019%2F01%2F08%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端 -hexo</tag>
      </tags>
  </entry>
</search>
